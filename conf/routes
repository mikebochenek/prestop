# Home page
GET      /                      controllers.Application.login

# Play routes serving HTML to AngularJS start with /views
GET      /views/*any            controllers.Application.loadPublicHTML(any)

# public APIs (for mobile development etc.)
GET      /api/search                 controllers.Search.searchWithFilters(keyword: String ?= "", id: Long ?= 0, longitude: String ?= "", latitude: String ?= "", maxDistance: Double ?= 10, minPrice: Double ?= 0.0, maxPrice: Double ?= 1000.0, openNow: Boolean ?= false, lastDishID: Long ?= 0, maxDishes: Long ?= 100, avoid: String ?= "")
GET      /api/searchsuggestions      controllers.Search.suggest(keyword: String ?= "", id: Long ?= 0)

GET      /api/recommend/:id,:longitude,:latitude,:filter    controllers.Recommend.get(id: Long, longitude: String, latitude: String, filter: String)
GET      /api/recommend              controllers.Recommend.getWithFilters(id: Long ?= 0, longitude: String ?= "", latitude: String ?= "", maxDistance: Double ?= 10, minPrice: Double ?= 0.0, maxPrice: Double ?= 1000.0, openNow: Boolean ?= false, lastDishID: Long ?= 0, maxDishes: Long ?= 100, avoid: String ?= "")
GET      /api/restaurant/:id         controllers.Restaurants.getById(id: Long)
GET      /api/restaurant_populate    controllers.Restaurants.createAndPopulate(id: Long ?= 0, longitude: String ?= "", latitude: String ?= "", name: String ?= "", street: String ?= "", postalcode: String ?= "", phone: String ?= "", website: String ?= "", schedule: String ?= "", place_id: String ?= "")
GET      /api/friends/:id            controllers.Friends.getByUser(id: Long)
POST     /api/friends/new            controllers.Friends.create
POST     /api/friends/update         controllers.Friends.update
POST     /api/friends/suggest        controllers.Friends.suggestFriendsToFollow
GET      /api/activities/:id         controllers.Activities.getByUser(id: Long)
GET      /api/reservations/:id       controllers.Reservations.getByUser(id: Long)
POST     /api/reservations/new       controllers.Reservations.create
GET      /api/settings/:id           controllers.Settings.getByUser(id: Long)
POST     /api/register               controllers.Settings.register
POST     /api/checkExistingUser      controllers.Settings.checkExistingUser
GET      /api/deleteuser/:id         controllers.Settings.deleteUser(id: Long)
POST     /api/personalize            controllers.Settings.personalize
POST     /api/personalizetaste       controllers.Settings.personalizeTasteProfile
GET      /api/intros/:lang           controllers.Settings.introTexts(lang: String)

GET      /api/tags                   controllers.Dishes.getTags(ttype: Int ?= 0)
POST     /api/invite                 controllers.Friends.invite
POST     /api/reservations/update    controllers.Reservations.update
POST     /api/settings/uploadpic     controllers.Settings.uploadPhoto(id: Long ?= 0)
GET      /api/cuisines               controllers.Settings.cuisines

GET      /api/userprofile/:id        controllers.Friends.getUserProfile(id: Long)

POST     /api/activities/create        controllers.Activities.create
GET      /api/getlikes/:id             controllers.Activities.getLikesByUser(id: Long)
GET      /api/like/:userId,:dishId     controllers.Activities.like(userId: Long, dishId: Long)
GET      /api/unlike/:userId,:dishId   controllers.Activities.unlike(userId: Long, dishId: String)
POST     /api/unlike                   controllers.Activities.unlikeSeveral
GET      /api/getlikers/:dishId,:userId  controllers.Activities.getByDish(dishId: Long, userId: Long)

GET      /api/getfriendswhobooked/:id  controllers.Reservations.getByRestaurant(id: Long)

POST     /api/new_post               controllers.Dishes.uploadDish(user_id: Long, dish_name: String, price: String, place_id: String)
GET      /api/restaurants            controllers.Restaurants.getAll
POST     /api/restaurants/new        controllers.Restaurants.create
GET      /api/dishes/:restId         controllers.Dishes.getAll(restId: Long)
GET      /api/restdishes/:restId,:userId   controllers.Dishes.getAllForUser(restId: Long, userId: Long)
POST     /api/dishes/new             controllers.Dishes.create

POST     /api/user/new               controllers.Settings.createUser

GET      /createdish                 controllers.Dishes.createAndPopulate(name: String ?= "", tags: String ?= "", restaurant: Long ?= 2, jsonFilename: String ?= "", imageFilename: String ?= "")
GET      /dishedit/:id               controllers.Dishes.getById(id: Long)
GET      /crop/:id,:imgType          controllers.Dishes.cropImage(id: Long, imgType: String)
POST     /crop/:id,:imgType          controllers.Dishes.cropImagePost(id: Long, imgType: String)
POST     /dishedit                   controllers.Dishes.save
POST	 /dish						 controllers.Dishes.upload(id: Long)

GET      /test            controllers.Recommend.test
GET      /testsubmit      controllers.Recommend.testsubmit

GET     /restaurant                         controllers.Restaurants.index
GET     /restaurantedit/:id                 controllers.Restaurants.edit(id: Long)
POST    /restaurantedit                     controllers.Restaurants.save
GET     /restaurantlocations/:id            controllers.Restaurants.editLocations(id: Long)
POST    /restaurantlocations                controllers.Restaurants.saveLocations
GET     /addrestaurantlocations/:id         controllers.Restaurants.addLocations(id: Long)
GET     /about                              controllers.Restaurants.about
POST	/restaurant							controllers.Restaurants.upload(id: Long)
POST	/restaurant2						controllers.Restaurants.uploadLogo(id: Long)
GET     /contact                            controllers.Restaurants.contact
GET     /approvals                          controllers.Settings.approvalsList
GET     /users                              controllers.Settings.userList
GET     /useredit/:id                       controllers.Settings.userEdit(id: Long)
POST    /usereditor                         controllers.Settings.saveUser
GET     /tageditor                          controllers.TagEditor.load
GET     /tagedit/:id                        controllers.TagEditor.loadTag(id: Long)
POST    /tageditor                          controllers.TagEditor.save
GET     /permalink/:id                      controllers.Application.permalink(id: String)

# Authentication
GET     /login                              controllers.Application.login
GET     /createuser                         controllers.Application.createuser
GET     /forgotpassword                     controllers.Application.forgotpassword
POST    /submitforgotpassword               controllers.Application.submitforgotpassword
GET     /submitcreateuser                   controllers.Application.submitcreateuser
POST    /login                              controllers.Application.authenticate
# GET     /testlogin/:id                      controllers.Application.authenticateTest(id: String)
GET     /logout                             controllers.Application.logout

POST    /acceptpayment                      controllers.Settings.acceptpayment
GET     /reports                            controllers.Reports.load(mode: String ?= "")
GET     /dailyreports                       controllers.Reports.loaddaily
GET     /settings                           controllers.Settings.load
POST    /settings                           controllers.Settings.save
GET     /settings_csv_export                controllers.Settings.generateCSV
GET     /settings_xml_export                controllers.Settings.generateXML
GET     /settings_json_export               controllers.Settings.generateJSON
GET     /reservations/:id                   controllers.Reservations.load(id: Long)
GET     /imagegrabber                       controllers.ImageGrabber.load(name: String ?= "")

#DELETE   /api/donelist/:id   controllers.DoneList.delete(id: Long)


# Map static resources from the /public folder to the / URL path
# this breaks the last "redirect all unknown routes..." but I need this for the language selection dropdown
GET      /*file          controllers.Assets.at(path="/public", file)

# Redirect all unknown routes to the index page
GET      /*any                  controllers.Application.index(any)